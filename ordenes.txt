#control de ordenes para actualizacion de freebsd
#para ejecutar todo el contenido source funciones.sh; ejecutaord 
# source funciones.sh; ejecutaord all
#para ejecutar solo una orden en particular
#source orcenes.sh;   #orden
Titulo:		Configuracion de `uname -rs`
<001 "Configuracion de Conexion inalambrica">
		service netif stop
		service routing stop
		cat << EOF > /etc/wpa_supplicant.conf
		ctrl_interface=/var/run/wpa_supplicant
		eapol_version=2
		ap_scan=1
		fast_reauth=1
		network={
			ssid="salmo91"
			scan_ssid=0
			psk="42884521"
			priority=5
		}
		network={
			priority=0
			key_mgmt=NONE
		}
		EOF
		sysrc wlans_ath0="wlan0"
		sysrc ifconfig_wlan0="WPA inet 192.168.0.100/24 ssid salmo91"
		cat << EOF > /etc/resolv.conf
		nameserver 8.8.8.8
		nameserver 8.8.4.4
		EOF
		sysrc defaultroute="192.168.0.1"
		sysrc gateway_enable="YES"
		service netif start
		service routing start
		route add default 192.168.0.1
		echo Comprobando conexion con www.google.co.ve
		ping -c 4 www.google.co.ve 
</001>
<002 "Configuraciones de paquetes">
		sysrc autoboot_delay="2"
		echo actualizando pkg ... LATEST
		mkdir -p /usr/local/etc/pkg/repos
		cat << EOF > /usr/local/etc/pkg/repos/FreeBSD.conf
		FreeBSD: {
			url: "pkg+http://pkg.FreeBSD.org/\${ABI}/latest"
		}
		EOF
		pkg-static upgrade -f -y &&
		pkg upgrade -y &&
		pkg install -y bash-completion
</002>
<003 "Coleccion de Ports">
		portsnap auto &&
		cd /usr/ports &&
		make index && cd -
</003>

<004 "Servidor X">
		pkg install -y xorg && 
		sysrc hald_enable="YES" && 	
		sysrc dbus_enable="YES" 
 	
</004>
<010 "Manejo de usuarios (SUDO)">
		export BATCH=yes
		cd /usr/ports/security/sudo &&
		make install clean &&
		cd - 
</010>
<011 "Permitir superusuario en grupo WHEEL">
		echo "%wheel ALL=(ALL) ALL" >> /usr/local/etc/sudoers
</011>
<012 "Agregar usuario VONUSER">
		pw useradd -n vonuser -G wheel,operator,video  -m -s /usr/local/bin/bash && 
		dialog --stdout --msgbox  "Recuerde configurar manualmentes el password para el usuario \n`id vonuser`" 10 60
</012>
<013 "Configuracion regional">
		tzsetup /usr/share/zoneinfo/America/Caracas
		sysrc keymap=latinamerican.acc.kbd
		cat << EOF >> /etc/login.conf
		venezuelan|Cuenta de usuario regional:\\
			:charset=es_MX.UTF-8:\\
			:lang=es_MX.UTF-8:
		EOF
		cap_mkdb /etc/login.conf
		pw user mod root -L venezuelan
		pw user mod vonuser -L venezuelan
</013>
<015 "Cambiar a Shell BASH">
		chsh -s /usr/local/bin/bash
</015>
<250 "Mate Desktop">
		pkg install -y mate redshift pftop
		echo Agregando politicas para cierre de sesión
		cat << EOF >> /usr/local/etc/polkit-1/rules.d/50-default.rules
		polkit.addRule(function (action, subject)
		{
		if ((action.id == "org.freedesktop.consolekit.system.restart" ||
        action.id == "org.freedesktop.consolekit.system.stop")   &&
        subject.isInGroup("wheel"))
		{
        return polkit.Result.YES;
		}
		});
		EOF
		sysrc polkitd_enable="YES"
</250>
<251 "Driver Intel y otras configuraciones">
		pkg install -y drm-kmod 
		sysrc kld_list+="/boot/modules/i915kms.ko"
		sysrc -f /boot/loader.conf loader_logo="beastie"
		sysrc -f /boot/loader.conf coretemp_load="YES"
		sysrc -f /boot/loader.conf aio_load="YES"
		sysrc -f /boot/loader.conf snd_driver_load="YES"
		sysrc moused_enable="NO"
		echo "vfs.usermount=1" >> /etc/sysctl.conf
		echo "net.link.bridge.pfil_bridge=0" >> /etc/sysctl.conf
		echo "net.link.bridge.pfil_onlyip=0" >> /etc/sysctl.conf
		echo "net.link.bridge.pfil_member=0" >> /etc/sysctl.conf
		sysctl net.link.bridge.pfil_bridge=0
		sysctl net.link.bridge.pfil_onlyip=0
		sysctl net.link.bridge.pfil_member=0
</251>
<252 "Brillo de pantalla">
		pkg install -y intel-backlight
		sysrc -f /boot/loader.conf acpi_video_load="YES"
		cp /usr/local/share/examples/intel-backlight/acpi-video-intel-backlight.conf  /usr/local/etc/devd/
</252>
<255 "Aplicaciones graficas">
		pkg install -y gimp geany lxterminal libreoffice geany firefox-esr numix-gtk-theme numix-icon-theme neofetch vlc pwcview
</255>
<257 "Aplicaciones de estudio">
		pkg install -y texlive-full docear calibre jabref
</257>
<258 "Instalacion de jDownloader">
		which megadl
		if [[ $? -eq 1 ]]; then #si no esta instalado
			echo -e "Compilando $blanco megatools $normal"
			export 	BATCH=yes
			cd /usr/ports/net/megatools
			make install clean
			export 	BATCH=no
			cd -
		fi
		which megadl
		if [[ $? -eq 0 ]]; then
			echo Instalando open java
			#pkg install -y openjdk8 - ya instalado con calibre
			su vonuser -c 'mkdir $HOME/jDownloader'
			echo Descargando de MEGA.NZ
			su vonuser -c 'megadl https://mega.nz/file/6FtSTAaa#iCcVpHl4hePgpj2q7EdcqGofDQKAt7rohGybzRCogv0 --path $HOME/jDownloader/' && 
			su vonuser -c 'java -jar $HOME/jDownloader/JDownloader.jar'
		fi
</258>
<260 "Webcam, linux y + configuraciones">
		sysrc webcamd_enable="YES"	
		sysrc cuse_load="YES"
		sysrc linux_load="YES"	
		sysrc -f /boot/loader.conf cuse4bsd_load="YES"
		sysrc -f /boot/loader.conf pwc_load="YES"
</260>
<300 "Creando .xinitrc">
		direc=$(pw usershow vonuser | cut -d : -f9)
		cat << EOF > $direc/.xinitrc
			sysctl hw.snd.default_unit=2
			redshift -l 10.434365:-66.971897 -g 0.9 &
			setxkbmap -model pc104 -layout es -option ""
			exec mate-session
		EOF
		cat << EOF > /root/.bashrc
			export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:~/bin
			export PAGER=less
			export MANPAGER=less
			HISTCONTROL=ignoreboth
			shopt -s histappend
			HISTSIZE=10000
			HISTFILESIZE=2000
			export EDITOR=nano
			export VISUAL=nano
			shopt -s checkwinsize
			export LC_ALL=es_MX.UTF-8
			PS1='\[\033[01;31m\]\u\[\033[01;33m\]@\[\033[01;36m\]\h \[\033[01;33m\]\w \[\033[01;35m\]\$\> \[\033[00m\]'
			source ~/.aliases
		EOF
		ln -s /root/.bashrc /root/.bash_profile
		cp /root/.bashrc $direc/.bashrc
		cp /root/.bashrc $direc/.bash_profile
		chown vonuser:wheel $direc/.bashrc
		chown vonuser:wheel $direc/.bash_prfile
		cat << EOF > /root/.aliases
			alias ls='ls -G'
			alias grep='grep --color=auto'
			alias fgrep='fgrep --color=auto'
			alias egrep='egrep --color=auto'
		EOF
		cp /root/.aliases $direc/.aliases
		chown vonuser:wheel $direc/.aliases
</300>
<301 "Inicio de sesion">
		pkg install -y slim
		sysrc slim_enable="YES" 
		pkg install -y slim-freebsd-black-theme slim-freebsd-dark-theme slim-freebsd-themes slim-themes 
		sed -E -i .bak '/current_theme/c \
		current_theme fbsd,freebsd-bestie,freebsd-simple,slim-freebsd-black-theme,slim-freebsd-dark-theme 
		' /usr/local/etc/slim.conf
		
</301>
<302 "Contrasenas de usuarios">
		Echo "Ingrese la contrasena para usuario <vonuser>"
		passwd vonuser
</302>
<310 "Configuracion de switch virtual">
		#pkg install -y vm-bhyve &&
		#sysrc vm_enable="YES"&&
		#sysrc vm_dir=/root/vm &&
		#mkdir -p /root/vm && 
		#vm init &&
		#vm switch create -a 10.1.1.1/24 services 
</310>

<312 "Configurando servidor SSH">
		sed -E -i .bak '/^Port/c\
		Port 2222
		' /etc/ssh/sshd_config
		sed -E -i .bak '/^ListenAddress/c\
		ListenAddress 192.168.0.100
		' /etc/ssh/sshd_config
		sed -E -i .bak '/^\#Port/c\
		Port 2222
		' /etc/ssh/sshd_config
		sed -E -i .bak '/^\#ListenAddress/c\
		ListenAddress 192.168.0.100
		' /etc/ssh/sshd_config
		service sshd restart
</312>
<313 "Configurando syslogd">
		sysrc syslogd_enable="YES" &&
		syslogd_flags="-b 192.168.0100 -sS" &&
		service syslogd restart	
</313>

<315 "Generando certificados">
		su vonuser -m -c 'mkdir $HOME/.ssh' &&
		su vonuser -m -c 'touch $HOME/.ssh/authorized_keys' &&
		su vonuser -m -c 'ssh-keygen  -t ecdsa -b 521 -P operador -f $HOME/.ssh/vonuserkey'
</315>

<320 "Tuneables">
		sysrc -f /boot/loader.conf boot_mute="YES"
		sysrc rc_startmsgs="NO"
		
</320>
<325 "Servidor NTPD">
		sysrc ntpdate_enable="YES"
		sysrc openntpd_flags="-s"
		sysrc ntpd_enable="YES"
		sysrc ntpd_sync_on_start="YES"
		sed -E -i .bak '/^pool/c \
		pool 0.pool.ntp.org iburst 
		' /etc/ntp.conf
</325>
<327 "Respaldando">
		echo Creando respaldo con todos los cambios efectuados
		sh respaldo.sh
</327>
<329 "Instalacion de EZJAIL">
		pkg install -y ezjail
		ezjail-admin install 
		sysrc ezjail_enable="YES"
</329>
<335 "Creacion de reglas especiales para dispositivos">
		#verificamos que exista la regla
		numregla=10
		nomregla="zoneminder"
		numlinea=`devfs rule -s $numregla show | wc -l `
		if [[ $numlinea -eq 0 ]] ; then #creamos la regla
			echo -e "Creando la regla $red $numregla $nomregla $normal"
		cat << EOF >> /etc/devfs.rules
		[$nomregla=$numregla]
			add include \$devfsrules_jail
			add path usb unhide mode 0660 group wheel
			add path video* unhide mode 0660 group wheel
		EOF
			echo reiniciando servicio...
			service devfs restart
		else
			echo -e "La regla $red $numregla $nomregla $normal ya existe"
		fi
</335>
<400 "Crear interfaces virtuales">
		sysrc cloned_interfaces="bridge0 epair0"
		sysrc ifconfig_bridge0="addm epair0b addm epair0a"
		sysrc ifconfig_bridge0="inet 10.1.1.1/24"
		sysrc ifconfig_epair0a="up"
		sysrc ifconfig_epair0b="up"
		service netif restart
</400>
<411 "Creacion de firewall">
		cat << EOF > /etc/pf.conf
		set skip on lo0
		net_ext=wlan0
		nat on \$net_ext from 10.1.1/24  -> wlan0:0
		EOF
		sysrc pf_enable="YES" 
		sysrc pflog_enable="YES" 
		sysrc pf_rules="/etc/pf.conf" 
		service pf  start
</411>
<415 "Creacion de jaula wineJail">
		ezjail-admin create -s 20G wineJail 'epair0b|10.1.1.2'
		ezjail-admin list
</415>

<422 "Funcion para crear Jaulas">
		function crearJaula {
				#$1 --- nombre de la jaula
				#$2 --- direccion ip local ejem 10.1.1.3
				myjail=$1
				myip=$2
				echo Creando  jaula $myjail
				ezjail-admin create -s 20G $myjail "epair0b|$myip"
				if [[ $? -eq 0 ]]; then
					ezjail-admin list
					echo Configurando jaula $myjail
					ezjail-admin stop $myjail 2> /dev/null
					umount /usr/jails/$myjail/basejail 2> /dev/null
					umount /usr/jails/$myjail/usr/ports 2> /dev/null
					rm /usr/jails/$myjail/usr/ports 2> /dev/null
					mkdir /usr/jails/$myjail/usr/ports 
					mkdir -p /usr/jails/$myjail/home/usuario/Documentos
					
		sed -E -i .bak "/jail_"$myjail"_parameters/c \\
		export jail_"$myjail"_parameters=\"allow.raw_sockets=1\"
		" /usr/local/etc/ezjail/$myjail ;
		cat << EOF > /usr/jails/$myjail/etc/resolv.conf
		nameserver 8.8.8.8
		nameserver 8.8.4.4
		EOF
		cat << EOF > /etc/fstab.$myjail
		/usr/jails/basejail		/usr/jails/$myjail/basejail	nullfs ro 0 0
		/usr/ports				/usr/jails/$myjail/usr/ports	nullfs rw 0 0
		/usr/home/vonuser	/usr/jails/$myjail/home/usuario/Documentos	nullfs rw 0 0
		EOF
		cat << EOF > /usr/jails/$myjail/etc/rc.conf
		sshd_enable="YES"
		keymap="latinamerican.acc.kbd"
		syslogd_enable="NO"
		EOF
		sed -E -i .bak '/^\#Port/c\
		Port 2222
		' /usr/jails/$myjail/etc/ssh/sshd_config
		echo "ListenAddress $myip" >> /usr/jails/$myjail/etc/ssh/sshd_config
		sed -E -i .bak '/^\#X11Forwarding/c\
		X11Forwarding yes
		' /usr/jails/$myjail/etc/ssh/sshd_config
					echo 'X11UseLocalhost no' >> /usr/jails/$myjail/etc/ssh/sshd_config
		cat << EOF > /usr/jails/$myjail/etc/hosts
		::1				localhost $myjail
		127.0.0.1		localhost $myjail
		$myip		$myjail
		192.168.0.100	vonserver.com
		EOF
					ezjail-admin start $myjail 
					jls | grep "$myjail"
					if [[ $? -ne 0 ]]; then
						dialog --stdout --msgbox "Error al iniciar jaula $myjail.\nVerifica configuracion" 0 0
						return 0
					fi
					ezjail-admin console -e 'pkg update -y' $myjail
					ezjail-admin console -e 'pkg install -y nano xauth xeyes bash sudo geany' $myjail
					echo "Agregando usuario <usuario>"
					ezjail-admin console -e 'pw useradd -n usuario -G wheel,operator,video  -m -s /usr/local/bin/bash' $myjail
					ezjail-admin console -e 'chsh -s /usr/local/bin/bash' $myjail
					cp /root/.bashrc	/usr/jails/$myjail/root/.bashrc
					cp /root/.bashrc	/usr/jails/$myjail/root/.bash_profile
					cp /root/.bashrc	/usr/jails/$myjail/home/usuario/.bashrc
					cp /root/.bashrc	/usr/jails/$myjail/home/usuario/.bash_profile
					cp /root/.aliases 	/usr/jails/$myjail/root/.aliases
					cp /root/.aliases 	/usr/jails/$myjail/home/usuario/.aliases
					ezjail-admin console -e 'chown usuario:usuario /home/usuario/.bashrc' $myjail
					ezjail-admin console -e 'chown usuario:usuario /home/usuario/.bash_profile' $myjail
					ezjail-admin console -e 'chown usuario:usuario /home/usuario/.aliases' $myjail
					echo "%wheel ALL=(ALL) ALL" >> /usr/jails/$myjail/usr/local/etc/sudoers
					echo Creando certificados SSH
					mkdir -p /usr/jails/$myjail/home/usuario/.ssh
					cat /home/vonuser/.ssh/vonuserkey.pub > /usr/jails/$myjail/home/usuario/.ssh/authorized_keys
					echo Configuracion regional
		cat << EOF >> /usr/jails/$myjail/etc/login.conf
		venezuelan|Cuenta de usuario regional:\\
		:charset=es_MX.UTF-8:\\
		:lang=es_MX.UTF-8:
		EOF
					ezjail-admin console -e 'cap_mkdb /etc/login.conf' $myjail
					ezjail-admin console -e 'pw user mod root -L venezuelan' $myjail
					ezjail-admin console -e 'pw user mod usuario -L venezuelan' $myjail
					echo "Generando contrasena para <root>"
					ezjail-admin console -e 'passwd' $myjail
					echo "Generando contrasena para <usuario>"
					ezjail-admin console -e 'passwd usuario' $myjail
					ezjail-admin restart $myjail && echo -e "Jaula creada exitosamente - recuerde conectar con $yellow ssh -p 2222 -X usuario@$myip $normal"
				fi
		}
		echo -e "Creando respaldo para jaula $green $myjail $normal"
		cp respaldo.sh /usr/jails/$myjail/root/respaldo.sh
		cp serv.sh /usr/jails/$myjail/root/serv.sh
		ezjail-admin console -e 'bash /root/respaldo.sh' $myjail
</422>
<423 "Jaula wineJail">	
		crearJaula "wineJail" "10.1.1.2"
</423>
<424 "Jaula NodeJail">	
		crearJaula "NodeJail" "10.1.1.3"
</424>
<425 "zoneminderJail">
		#crearJaula "zoneminder" "10.1.1.4"
		sed -E -i .bak "/jail_zoneminder_devfs_ruleset/c \\
		export jail_"zoneminder"_devfs_ruleset=\"10\"
		" /usr/local/etc/ezjail/zoneminder ;
		ezjail-admin restart zoneminder
</425>
<555 "Fin de la configuracion">
		#dialog --clear
		dialog --stdout --msgbox  "Se han efectuado las configuraciones, debe reiniciar el sistema" 10 60
	
</555>
